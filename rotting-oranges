class Solution {
    public class Pair{
        int row;
        int col;
        Pair(int r,int c){
            this.row=r;
            this.col=c;
        }
    }
    public int orangesRotting(int[][] grid) {
        Queue<Pair>q=new LinkedList<>();
        int fresh=0;
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[0].length;j++){
                if(grid[i][j]==2){
                    q.add(new Pair(i,j));
                }
                else if(grid[i][j]==1){
                    fresh++;
                }
            }
        }
        if(fresh==0){
            return 0;
        }
        int count=0;
        int rows[]={0,0,-1,1};
        int cols[]={-1,1,0,0};
        q.add(null);
        while(!q.isEmpty()){
            Pair curr=q.remove();
            if(curr==null){
                if(q.isEmpty()){
                    count++;
                    break;
                }
                else{
                    count++;
                    q.add(null);
                }
            }
            else{
                for(int i=0;i<rows.length;i++){
                    int x=rows[i]+curr.row;
                    int y=cols[i]+curr.col;
                    if(x>=0&&x<grid.length&&
                    y>=0&&y<grid[0].length&&
                    grid[x][y]==1){
                        grid[x][y]=2;
                        q.add(new Pair(x,y));
                    }
                }
            }
        }
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[0].length;j++){
                if(grid[i][j]==1){
                   return -1;
                }
            }
        }
        return count-1;

    }
}
